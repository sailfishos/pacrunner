From 7700852ba42e7f47570b9a24c4095e0fb015b2ed Mon Sep 17 00:00:00 2001
From: Oleg Girko <oleg.girko@jolla.com>
Date: Wed, 26 Feb 2014 02:33:40 +0000
Subject: [PATCH] plugins: Update v8 plugin to the newest API.

This change updates v8 plugin to the newest API used in v8 3.25.1.

Signed-off-by: Oleg Girko <oleg.girko@jolla.com>
---
 plugins/v8.cc | 115 +++++++++++++++++++++++++++++++++-------------------------
 1 file changed, 65 insertions(+), 50 deletions(-)

diff --git a/plugins/v8.cc b/plugins/v8.cc
index 6cb28ca..60aaae6 100644
--- a/plugins/v8.cc
+++ b/plugins/v8.cc
@@ -48,7 +48,8 @@ static guint gc_source = 0;
 
 static gboolean v8_gc(gpointer user_data)
 {
-	v8::Locker lck;
+	v8::Isolate *isolate = v8::Isolate::GetCurrent();
+	v8::Locker lck(isolate);
 	return !v8::V8::IdleNotification();
 }
 
@@ -97,36 +98,47 @@ static int resolve(const char *node, char *host, size_t hostlen)
 	return 0;
 }
 
-static v8::Handle<v8::Value> myipaddress(const v8::Arguments& args)
+static void myipaddress(const v8::FunctionCallbackInfo<v8::Value>& info)
 {
+	v8::Isolate *isolate = info.GetIsolate();
 	const char *interface;
 	char address[NI_MAXHOST];
 
 	DBG("");
 
-	if (current_proxy == NULL)
-		return v8::ThrowException(v8::String::New("No current proxy"));
+	if (current_proxy == NULL) {
+		isolate->ThrowException(v8::String::NewFromUtf8(isolate, "No current proxy"));
+		return;
+	}
 
 	interface = pacrunner_proxy_get_interface(current_proxy);
-	if (interface == NULL)
-		return v8::ThrowException(v8::String::New("Error fetching interface"));
+	if (interface == NULL) {
+		isolate->ThrowException(v8::String::NewFromUtf8(isolate, "Error fetching interface"));
+		return;
+	}
+
+	if (getaddr(interface, address, sizeof(address)) < 0) {
+		isolate->ThrowException(v8::String::NewFromUtf8(isolate, "Error fetching IP address"));
+		return;
+	}
 
-	if (getaddr(interface, address, sizeof(address)) < 0)
-		return v8::ThrowException(v8::String::New("Error fetching IP address"));
 
 	DBG("address %s", address);
 
-	return v8::String::New(address);
+	info.GetReturnValue().Set(v8::String::NewFromUtf8(isolate, address));
 }
 
-static v8::Handle<v8::Value> dnsresolve(const v8::Arguments& args)
+static void dnsresolve(const v8::FunctionCallbackInfo<v8::Value>& info)
 {
+	v8::Isolate *isolate = info.GetIsolate();
 	char address[NI_MAXHOST];
-	v8::String::Utf8Value host(args[0]);
+	v8::String::Utf8Value host(info[0]);
 	char **split_res;
 
-	if (args.Length() != 1)
-		return v8::ThrowException(v8::String::New("Bad parameters"));
+	if (info.Length() != 1) {
+		isolate->ThrowException(v8::String::NewFromUtf8(isolate, "Bad parameters"));
+		return;
+	}
 
 	DBG("host %s", *host);
 
@@ -137,21 +149,26 @@ static v8::Handle<v8::Value> dnsresolve(const v8::Arguments& args)
 		g_strfreev(split_res);
 
 		if (length > 1) {
-			v8::ThrowException(
-				v8::String::New("Failed to resolve"));
+			isolate->ThrowException(
+				v8::String::NewFromUtf8(isolate, "Failed to resolve"));
+			return;
 		}
 	}
 
-	if (resolve(*host, address, sizeof(address)) < 0)
-		return v8::ThrowException(v8::String::New("Failed to resolve"));
+	if (resolve(*host, address, sizeof(address)) < 0) {
+		isolate->ThrowException(v8::String::NewFromUtf8(isolate, "Failed to resolve"));
+		return;
+	}
 
 	DBG("address %s", address);
 
-	return v8::String::New(address);
+	info.GetReturnValue().Set(v8::String::NewFromUtf8(isolate, address));
 }
 
 static void create_object(void)
 {
+	v8::Isolate *isolate = v8::Isolate::GetCurrent();
+
 	if (!current_proxy)
 		return;
 
@@ -160,79 +177,76 @@ static void create_object(void)
 		printf("no script\n");
 		return;
 	}
-	v8::HandleScope handle_scope;
+	v8::HandleScope handle_scope(isolate);
 	v8::Handle<v8::ObjectTemplate> global = v8::ObjectTemplate::New();
 
-	global->Set(v8::String::New("myIpAddress"),
-		    v8::FunctionTemplate::New(myipaddress));
-	global->Set(v8::String::New("dnsResolve"),
-		    v8::FunctionTemplate::New(dnsresolve));
+	global->Set(v8::String::NewFromUtf8(isolate, "myIpAddress"),
+		    v8::FunctionTemplate::New(isolate, myipaddress));
+	global->Set(v8::String::NewFromUtf8(isolate, "dnsResolve"),
+		    v8::FunctionTemplate::New(isolate, dnsresolve));
 
-	jsctx = v8::Context::New(NULL, global);
-	v8::Context::Scope context_scope(jsctx);
+	jsctx.Reset(isolate, v8::Context::New(isolate, NULL, global));
+	v8::Context::Scope context_scope(v8::Local<v8::Context>::New(isolate, jsctx));
 
 	v8::TryCatch exc;
 	v8::Handle<v8::Script> script_scr;
 	v8::Handle<v8::Value> result;
 
-	script_scr = v8::Script::Compile(v8::String::New(JAVASCRIPT_ROUTINES));
+	script_scr = v8::Script::Compile(v8::String::NewFromUtf8(isolate, JAVASCRIPT_ROUTINES));
 	if (script_scr.IsEmpty()) {
 		v8::String::Utf8Value err(exc.Exception());
 		DBG("Javascript failed to compile: %s", *err);
-		jsctx.Dispose();
+		jsctx.Reset();
 		return;
 	}
 	result = script_scr->Run();
 	if (exc.HasCaught()) {
 		v8::String::Utf8Value err(exc.Exception());
 		DBG("Javascript library failed: %s", *err);
-		jsctx.Dispose();
+		jsctx.Reset();
 		return;
 	}
 
-	script_scr = v8::Script::Compile(v8::String::New(pac));
+	script_scr = v8::Script::Compile(v8::String::NewFromUtf8(isolate, pac));
 	if (script_scr.IsEmpty()) {
 		v8::String::Utf8Value err(exc.Exception());
 		DBG("PAC script failed to compile: %s", *err);
-		jsctx.Dispose();
+		jsctx.Reset();
 		return;
 	}
 	result = script_scr->Run();
 	if (exc.HasCaught()) {
 		v8::String::Utf8Value err(exc.Exception());
 		DBG("PAC script failed: %s", *err);
-		jsctx.Dispose();
+		jsctx.Reset();
 		return;
 	}
 
-	v8::Handle<v8::String> fn_name = v8::String::New("FindProxyForURL");
-	v8::Handle<v8::Value> fn_val = jsctx->Global()->Get(fn_name);
+	v8::Handle<v8::String> fn_name = v8::String::NewFromUtf8(isolate, "FindProxyForURL");
+	v8::Handle<v8::Value> fn_val = v8::Local<v8::Context>::New(isolate, jsctx)->Global()->Get(fn_name);
 
 	if (!fn_val->IsFunction()) {
 		DBG("FindProxyForUrl is not a function");
-		jsctx.Dispose();
+		jsctx.Reset();
 		return;
 	}
 	
-	jsfn = v8::Persistent<v8::Function>::New(v8::Handle<v8::Function>::Cast(fn_val));
+	jsfn.Reset(isolate, v8::Handle<v8::Function>::Cast(fn_val));
 	return;
 }
 
 static void destroy_object(void)
 {
-	if (!jsfn.IsEmpty()) {
-		jsfn.Dispose();
-		jsfn.Clear();
-	}
-	if (!jsctx.IsEmpty()) {
-		jsctx.Dispose();
-		jsctx.Clear();
-	}
+	if (!jsfn.IsEmpty())
+		jsfn.Reset();
+	if (!jsctx.IsEmpty())
+		jsctx.Reset();
 }
 
 static int v8_set_proxy(struct pacrunner_proxy *proxy)
 {
-	v8::Locker lck;
+	v8::Isolate *isolate = v8::Isolate::GetCurrent();
+	v8::Locker lck(isolate);
 
 	DBG("proxy %p", proxy);
 
@@ -253,25 +267,26 @@ static int v8_set_proxy(struct pacrunner_proxy *proxy)
 
 static char *v8_execute(const char *url, const char *host)
 {
-	v8::Locker lck;
+	v8::Isolate *isolate = v8::Isolate::GetCurrent();
+	v8::Locker lck(isolate);
 
 	DBG("url %s host %s", url, host);
 
 	if (jsctx.IsEmpty() || jsfn.IsEmpty())
 		return NULL;
 
-	v8::HandleScope handle_scope;
-	v8::Context::Scope context_scope(jsctx);
+	v8::HandleScope handle_scope(isolate);
+	v8::Context::Scope context_scope(v8::Local<v8::Context>::New(isolate, jsctx));
 
 	v8::Handle<v8::Value> args[2] = {
-		v8::String::New(url),
-		v8::String::New(host)
+		v8::String::NewFromUtf8(isolate, url),
+		v8::String::NewFromUtf8(isolate, host)
 	};
 
 	v8::Handle<v8::Value> result;
 	v8::TryCatch exc;
 
-	result = jsfn->Call(jsctx->Global(), 2, args);
+	result = v8::Local<v8::Function>::New(isolate, jsfn)->Call(v8::Local<v8::Context>::New(isolate, jsctx)->Global(), 2, args);
 	if (exc.HasCaught()) {
 		v8::Handle<v8::Message> msg = exc.Message();
 		int line = msg->GetLineNumber();
-- 
1.8.5.3

